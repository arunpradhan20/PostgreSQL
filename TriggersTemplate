A PostgreSQL trigger is a function invoked automatically whenever an event such as insert, update, or delete occurs

PostgreSQL provides two main types of triggers:
	1) Row-level triggers
	2) Statement-level triggers


To create a new trigger in PostgreSQL, you follow these steps:

Step 1: Create a trigger function using CREATE FUNCTION statement.
Step 2: Bind the trigger function to a table by using CREATE TRIGGER statement.

---------
Step 1:
---------
Syntax:
CREATE FUNCTION trigger_function() 
   RETURNS TRIGGER 
   LANGUAGE PLPGSQL
AS $$
BEGIN
   -- trigger logic
END;
$$

---------
Step 2:
---------
CREATE TRIGGER trigger_name 
   {BEFORE | AFTER} { event }
   ON table_name
   [FOR [EACH] { ROW | STATEMENT }]
       EXECUTE PROCEDURE trigger_function
	   

Notes:
--Event can be INSERT , DELETE, UPDATE or TRUNCATE
--OLD and NEW represent the states of the row in the table before or after the triggering event
--PostgreSQL also provides other local variables preceded by TG_ such as TG_WHEN, and TG_TABLE_NAME

-------------
Example:
-------------
Step 1:
CREATE OR REPLACE FUNCTION log_last_name_changes()
  RETURNS TRIGGER 
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
	IF NEW.last_name <> OLD.last_name THEN
		 INSERT INTO employee_audits(employee_id,last_name,changed_on)
		 VALUES(OLD.id,OLD.last_name,now());
	END IF;

	RETURN NEW;
END;
$$

Step 2:
CREATE TRIGGER last_name_changes
  BEFORE UPDATE
  ON employees
  FOR EACH ROW
  EXECUTE PROCEDURE log_last_name_changes();
